[00400000] 8f880000 lw $8, 0($28)                   ; 11: lw      $t0, 0($gp)        # Load t0 from memory t0 = 0
[00400004] 21090005 addi $9, $8, 5                  ; 12: addi    $t1, $t0, 5        # t1 = t0 + 5, forwarding t1 = 5
[00400008] 8f890004 lw $9, 4($28)                   ; 13: lw      $t1, 4($gp)        # t1 = 1
[0040000c] 212a0004 addi $10, $9, 4                 ; 14: addi    $t2, $t1, 4        # t2 = t1 + 4, forwarding t2 = 5
[00400010] 01495820 add $11, $10, $9                ; 15: add     $t3, $t2, $t1      # t3 = t2 + t1, forwarding from both t2 and t1 t3 = 9
[00400014] 8f8c0008 lw $12, 8($28)                  ; 16: lw      $t4, 8($gp)        # t4 = 2
[00400018] 018b6822 sub $13, $12, $11               ; 17: sub     $t5, $t4, $t3      # t5 = t4 - t3, forwarding from t4 t5 = -7
[0040001c] 01ac7025 or $14, $13, $12                ; 18: or      $t6, $t5, $t4      # t6 = t5 | t4, forwarding from t5
[00400020] 01cb7824 and $15, $14, $11               ; 19: and     $t7, $t6, $t3      # t7 = t6 & t3, forwarding from t6
[00400024] 118a0004 beq $12, $10, 16 [end-0x00400024]; 21: beq     $t4, $t2, end      # Branch if t4 == t2 == 5
[00400028] 218c0001 addi $12, $12, 1                ; 22: addi    $t4, $t4, 1        # t4 = t4 + 1, forwarding t4 = 3
[0040002c] 1000fffd beq $0, $0, -12 [loop-0x0040002c]; 23: beq     $0,  $0,  loop
[00400030] 00088020 add $16, $0, $8                 ; 24: add     $s0, $0, $t0       # Will not execute if branch is taken
[00400034] 00098820 add $17, $0, $9                 ; 25: add     $s1, $0, $t1
[00400038] 01ac9020 add $18, $13, $12               ; 27: add     $s2, $t5, $t4      # s0 = t5 + t4 = -7 + 5 = -2
[0040003c] 014b982a slt $19, $10, $11               ; 28: slt     $s3, $t2, $t3      # s3 = 1